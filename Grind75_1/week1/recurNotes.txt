

https://developer.ibm.com/articles/l-recurs/
Basic steps of recursive programs

Every recursive program follows the same basic sequence of steps:

    1. Initialize the algorithm. Recursive programs often need a seed value to start with. This is accomplished either by using a parameter passed to the function or by providing a gateway function that is nonrecursive but that sets up the seed values for the recursive calculation.
    2. Check to see whether the current value(s) being processed match the base case. If so, process and return the value.
    3. Redefine the answer in terms of a smaller or simpler sub-problem or sub-problems.
    4. Run the algorithm on the sub-problem.
    5. Combine the results in the formulation of the answer.
    6. Return the results.



1. Return stack propageted found value
    Use return before the recursive call so that the value found will be propagated back out the the recursive stack so the value is returned.
    Creating its own function stack with the conditionals
    e.g.
    """
    https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/
    """

    # Definition for a binary tree node.
    # class TreeNode:
    #     def __init__(self, x):
    #         self.val = x
    #         self.left = None
    #         self.right = None

    class Solution:
        def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
            
            # recursive solution
            # base case, if node is None
            if (root is None):
                return None

            if (p.val < root.val > q.val):
                # check left if both values are lesser than the root
                return self.lowestCommonAncestor(root.left, p, q)
            elif (p.val > root.val < q.val):
                # check right if both values are greater than the root
                return self.lowestCommonAncestor(root.right, p, q)
            else:
                # found the LCA
                return root

    """
    root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, p = 4

    lowestCommonAncestor(6, ...)
        since 2 < 6 and 4 < 6
        lowestCommonAncestor(2, ...)
            since 3 > 2 and 5 > 2
            lowestCommonAncestor(4, ...)
            No cond satisfied, ret root
        ret root
    ret root
    """

    e.g. Climbing stairs. The propagated value out off the stack is the values getting added then returned to its caller.
    def climbStairsTimeoutLOL(self, n: int) -> int:
        
        # base case. 0 steps left
        if (n <= 0):
            return 1

        distinct = 0

        if ((n - 2) >= 0):
            # if valid operation, add 1
            distinct = self.climbStairs(n - 2)

        if ((n - 1) >= 0):
            distinct = distinct + self.climbStairs(n - 1)

        # return the number of distinct options for the function call
        return distinct


    # much cleaner than mine
    def climbStairsBetterThanMine(self, n: int) -> int:
        if n == 0 or n == 1:
            return 1
        return self.climbStairs(n-1) + self.climbStairs(n-2)

2. Depth first search. 
Wiki: Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking
    Depending on the problem;
        - modify the contents while traversing forward. e.g. FloodFill.
        - modify the contents after determining that it is time to backtrack, based on base case. e.g. Invert binary tree

        e.g. Invert Binary Tree
        """
        https://leetcode.com/problems/invert-binary-tree/
        """

        # Definition for a binary tree node.
        # class TreeNode:
        #     def __init__(self, val=0, left=None, right=None):
        #         self.val = val
        #         self.left = left
        #         self.right = right
        class Solution:
            def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
                
                # recursive solution to get to the leaf nodes then swap from the bottom up
                # base case, return when no child found.
                if root is None:
                    return root
                
                # recursively call to search the left child nodes
                self.invertTree(root.left)

                # recursively call to search the right child nodes
                self.invertTree(root.right)
                
                #swap child nodes
                temp = root.left
                root.left = root.right
                root.right = temp

                # return the parent, at the end returns the root
                return root

        """
        2
        1
            left = none, ret
            right = none, ret
            swap
            ret 1
        3
            left = none, ret
            right = none, ret
            swap
            ret 3
        swap
        ret 2

        2, 3, 1
        """
                
3. Save the return value of the recursive function so that it can be used.
    E.g. Balanced Binary Tree. As the function stack pops (starting with the leaf nodes and height = 0), add 1 to the greater of the left and right height and return to it's parent.
    # Definition for a binary tree node.
    # class TreeNode:
    #     def __init__(self, val=0, left=None, right=None):
    #         self.val = val
    #         self.left = left
    #         self.right = right
    class Solution:
        def isBalancedCheck(self, root: Optional[TreeNode]) -> int:
            
            # recursive solution
            # base case
            if (root is None):
                return 0

            # get the height of the left subtree
            leftSubtreeHeight = self.isBalancedCheck(root.left)
            if (leftSubtreeHeight == -1):
                # found an imbalance, propagate -1 through the function stack
                return -1

            # get the height of the right subtree
            rightSubtreeHeight = self.isBalancedCheck(root.right)
            if (rightSubtreeHeight == -1):
                return -1

            # check if imbalance for a root node
            if (abs(leftSubtreeHeight - rightSubtreeHeight) > 1):
                return -1
            else:
                # + 1 to add this level.
                return max(leftSubtreeHeight, rightSubtreeHeight) + 1



        
        def isBalanced(self, root: Optional[TreeNode]) -> bool:
            return self.isBalancedCheck(root) != -1


Dynamic programming
https://www.geeksforgeeks.org/tabulation-vs-memoization/

Dynamic programming table
https://guides.codepath.com/compsci/DP-Table#:~:text=PagePage%20History-,Dynamic%20Programming%20Table,suffix%20or%20subsequence%20problem%20type.
